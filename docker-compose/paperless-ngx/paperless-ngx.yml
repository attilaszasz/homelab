version: '3.9'

## VARIABLES - Make sure you create these in Portainer as environment variables, or in a file named ".env" next to the docker-compose file
# $USER --- Linux user
# $TZ --- Timezone. Example: "Europe/Bucharest"
# $PUID --- Value of uid from the linux "id" command. Usually 1000
# $PGID --- Value of gid from the linux "id" command. Usually 1000
# $DOCKERDIR --- Where you want to map your Docker volumes

# $POSTGRES_USER
# $POSTGRES_PASSWORD

# $PAPERLESS_MEDIADIR
# $PAPERLESS_CONSUMEDIR
# $PAPERLESS_SECRET_KEY

########################### EXTENSION FIELDS
# Helps eliminate repetition of sections

# Common environment values
x-environment: &default-tz-puid-pgid
  TZ: $TZ
  PUID: $PUID
  PGID: $PGID

# Keys common to some of the dependent services/apps
# Create the network beforehand, as bridge
x-common-keys-apps: &common-keys
  networks:
    - paperless
  security_opt:
    - no-new-privileges:true
  restart: unless-stopped

######################### SERVICES
services: 

  broker:
    image: docker.io/library/redis:7
    container_name: paperless-redis

    volumes:
      - redisdata:/data
    <<: *common-keys # See EXTENSION FIELDS at the top

  db:
    image: docker.io/library/postgres:13
    container_name: paperless-postgres
    volumes:
      - $DOCKERDIR/paperless/postgres:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: paperless
      POSTGRES_USER: $POSTGRES_USER
      POSTGRES_PASSWORD: $POSTGRES_PASSWORD
    <<: *common-keys # See EXTENSION FIELDS at the top

  webserver:
    image: ghcr.io/paperless-ngx/paperless-ngx:latest
    container_name: paperless-ngx
    restart: unless-stopped
    depends_on:
      - db
      - broker
    ports:
      - 8010:8000
    healthcheck:
      test: ["CMD", "curl", "-fs", "-S", "--max-time", "2", "http://localhost:8000"]
      interval: 30s
      timeout: 10s
      retries: 5
    volumes:
      - $DOCKERDIR/paperless/data:/usr/src/paperless/data
      - $PAPERLESS_MEDIADIR/media:/usr/src/paperless/media
      - $PAPERLESS_MEDIADIR/export:/usr/src/paperless/export
      - $PAPERLESS_CONSUMEDIR:/usr/src/paperless/consume
    environment:
      PAPERLESS_REDIS: redis://broker:6379
      PAPERLESS_DBHOST: db
      PAPERLESS_DBUSER: $POSTGRES_USER
      PAPERLESS_DBPASS: $POSTGRES_PASSWORD
      # The UID and GID of the user used to run paperless in the container. Set this
      # to your UID and GID on the host so that you have write access to the
      # consumption directory.
      USERMAP_UID: $PUID
      USERMAP_GID: $PGID
      # Additional languages to install for text recognition, separated by a
      # whitespace. Note that this is
      # different from PAPERLESS_OCR_LANGUAGE (default=eng), which defines the
      # language used for OCR.
      # The container installs English, German, Italian, Spanish and French by
      # default.
      # See https://packages.debian.org/search?keywords=tesseract-ocr-&searchon=names&suite=buster
      # for available languages.
      PAPERLESS_OCR_LANGUAGES: ron eng hun
      # Adjust this key if you plan to make paperless available publicly. It should
      # be a very long sequence of random characters. You don't need to remember it.
      PAPERLESS_SECRET_KEY: $PAPERLESS_SECRET_KEY
      # Use this variable to set a timezone for the Paperless Docker containers. If not specified, defaults to UTC.
      PAPERLESS_TIME_ZONE: $TZ
      # The default language to use for OCR. Set this to the language most of your
      # documents are written in.
      # NOTE: Romanian is "ron", NOT "rom"
      PAPERLESS_OCR_LANGUAGE: ron
      PAPERLESS_URL: https://paperless.szaszattila.com
      PAPERLESS_ADMIN_USER: $PAPERLESS_ADMIN_USER
      PAPERLESS_ADMIN_MAIL: $PAPERLESS_ADMIN_MAIL
      PAPERLESS_ADMIN_PASSWORD: $PAPERLESS_ADMIN_PASSWORD
      PAPERLESS_CONSUMER_POLLING: 60
      PAPERLESS_FILENAME_FORMAT: "{title}"
    <<: *common-keys # See EXTENSION FIELDS at the top

######################### VOLUMES
volumes:
  data:
  media:
  pgdata:
  redisdata:
    
######################### NETWORKS
# Create this network before deploying the services, either in Portainer or with a docker command 
networks:
  paperless:
    external: true